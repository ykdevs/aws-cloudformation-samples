#
# Transit Gatewayを使ってVPCから外部への通信を１つのVPCに集約する
#
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Make Transit Gateway

Parameters:
  GatewayVpcCidrBlock:
    Type: String
    Description: Gateway VPC's CidrBlock
    Default: 172.16.32.0/24
  GatewayVpcSubnet1CidrBlock:
    Type: String
    Description: Gateway VPC Subnet1's CidrBlock
    Default: 172.16.32.0/28
  GatewayVpcSubnet2CidrBlock:
    Type: String
    Description: Gateway VPC Subnet2's CidrBlock
    Default: 172.16.32.16/28
  GatewayVpcSubnet2NatGatewayIp:
    Type: String
    Description: Gateway VPC Subnet2's NAT Gateway IP
    Default: 172.16.32.20
  ExternalVpcCidrBlock:
    Type: String
    Description: External VPC's CidrBlock
    Default: 192.168.64.0/24
  ExternalVpcSubnet1CidrBlock:
    Type: String
    Description: External VPC Subnet1's CidrBlock
    Default: 192.168.64.0/28
  PrivateVpc1CidrBlock:
    Type: String
    Description: Private VPC1's CidrBlock
    Default: 172.16.33.0/24
  PrivateVpc1Subnet1CidrBlock:
    Type: String
    Description: Private VPC1 Subnet1's CidrBlock
    Default: 172.16.33.0/28
  PrivateVpc2CidrBlock:
    Type: String
    Description: Private VPC2's CidrBlock
    Default: 172.16.34.0/24
  PrivateVpc2Subnet1CidrBlock:
    Type: String
    Description: Private VPC2 Subnet1's CidrBlock
    Default: 172.16.34.0/28
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d

Resources:

  # EC2 Role
  RoleForInstance:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
              - "ssm:GetParameters"
            Resource:
              - "*"
      Roles:
        - !Ref RoleForInstance

  VpcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  ##############################################################################
  # Gateway VPC
  ##############################################################################
  GatewayVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref GatewayVpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GatewayVpc"

  GatewayVpcSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref GatewayVpcSubnet1CidrBlock
      VpcId: !Ref GatewayVpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GatewayVpc-Subnet1"

  GatewayVpcSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GatewayVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GatewayVpc-Subnet1"

  GatewayVpcSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet1RouteTable
      SubnetId: !Ref GatewayVpcSubnet1

  GatewayVpcSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref GatewayVpcSubnet2CidrBlock
      VpcId: !Ref GatewayVpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GatewayVpc-Subnet2"

  GatewayVpcSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GatewayVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GatewayVpc-Subnet2"

  GatewayVpcSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet2RouteTable
      SubnetId: !Ref GatewayVpcSubnet2

  GatewayVpcSubnet2NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      PrivateIpAddress: !Ref GatewayVpcSubnet2NatGatewayIp
      SubnetId: !Ref GatewayVpcSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-GatewayVpc-Subnet2-NatGateway"

  GatewayVpcSubnet1RouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet1RouteTable
      DestinationCidrBlock: !Ref ExternalVpcCidrBlock
      NatGatewayId: !Ref GatewayVpcSubnet2NatGateway

  ##############################################################################
  # External VPC
  ##############################################################################
  ExternalVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ExternalVpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ExternalVpc"

  ExternalVpcSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ExternalVpcSubnet1CidrBlock
      VpcId: !Ref ExternalVpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ExternalVpc-Subnet1"

  ExternalVpcSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ExternalVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ExternalVpc-Subnet1"

  ExternalVpcSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ExternalVpcSubnet1RouteTable
      SubnetId: !Ref ExternalVpcSubnet1

  ExternalVpcSubnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref ExternalVpcSecurityGroupForEc2
      SubnetId: !Ref ExternalVpcSubnet1
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-ExternalVpc-Subnet1-Instance"

  ExternalVpcSecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ExternalVpc-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic by default"
          IpProtocol: -1
      VpcId: !Ref ExternalVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ExternalVpc-ForInstance"

  ExternalVpcSecurityGroupIngressFromGatewayVpcNatGateway:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt ExternalVpcSecurityGroupForEc2.GroupId
      CidrIp: !Sub "${GatewayVpcSubnet2NatGatewayIp}/32"
      FromPort: 22
      ToPort: 22

  ExternalVpcSecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ExternalVpc-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ExternalVpcSecurityGroupForEc2.GroupId
          Description: "Endpoint needs HTTPS from EC2"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref ExternalVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ExternalVpc-ForEndPoint"

  ExternalVpcEndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt ExternalVpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref ExternalVpcSubnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref ExternalVpc

  ExternalVpcEndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt ExternalVpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref ExternalVpcSubnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref ExternalVpc

  ExternalVpcEndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt ExternalVpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref ExternalVpcSubnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref ExternalVpc

  ExternalVpcEndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref ExternalVpcSubnet1RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref ExternalVpc

  # VPC Peering from Gateway VPC to External VPC
  VpcPeeringBetweenGatewayVpcToExternalVpc:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerOwnerId: !Sub ${AWS::AccountId}
      PeerRegion: !Sub ${AWS::Region}
      PeerVpcId: !Ref ExternalVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Between-GatewayVpc-to-ExternalVpc"
      VpcId: !Ref GatewayVpc

  GatewayVpcRouteToExternalVpc:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet2RouteTable
      DestinationCidrBlock: !Ref ExternalVpcCidrBlock
      VpcPeeringConnectionId: !Ref VpcPeeringBetweenGatewayVpcToExternalVpc

  ExternalVpcRouteToGatewayVpc:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ExternalVpcSubnet1RouteTable
      DestinationCidrBlock: !Ref GatewayVpcCidrBlock
      VpcPeeringConnectionId: !Ref VpcPeeringBetweenGatewayVpcToExternalVpc

  ##############################################################################
  # PrivateVPC1
  ##############################################################################
  PrivateVpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref PrivateVpc1CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc1"

  PrivateVpc1Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateVpc1Subnet1CidrBlock
      VpcId: !Ref PrivateVpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc1-Subnet1"

  PrivateVpc1Subnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PrivateVpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc1-Subnet1"

  PrivateVpc1Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateVpc1Subnet1RouteTable
      SubnetId: !Ref PrivateVpc1Subnet1

  PrivateVpc1Subnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref PrivateVpc1SecurityGroupForEc2
      SubnetId: !Ref PrivateVpc1Subnet1
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateVpc1-Subnet1-Instance"

  PrivateVpc1SecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-PrivateVpc1-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic by default"
          IpProtocol: -1
      VpcId: !Ref PrivateVpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc1-ForInstance"

  PrivateVpc1SecurityGroupIngressFromPrivateVpc2Ec2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt PrivateVpc1SecurityGroupForEc2.GroupId
      CidrIp: !Ref PrivateVpc2CidrBlock
      FromPort: 22
      ToPort: 22

  PrivateVpc1SecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-PrivateVpc1-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt PrivateVpc1SecurityGroupForEc2.GroupId
          Description: "Endpoint needs HTTPS from EC2"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref PrivateVpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc1-ForEndPoint"

  PrivateVpc1EndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt PrivateVpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref PrivateVpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref PrivateVpc1

  PrivateVpc1EndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt PrivateVpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref PrivateVpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref PrivateVpc1

  PrivateVpc1EndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt PrivateVpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref PrivateVpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref PrivateVpc1

  PrivateVpc1EndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PrivateVpc1Subnet1RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref PrivateVpc1

  ##############################################################################
  # PrivateVPC2
  ##############################################################################
  PrivateVpc2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref PrivateVpc2CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc2"

  PrivateVpc2Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateVpc2Subnet1CidrBlock
      VpcId: !Ref PrivateVpc2
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc2-Subnet1"

  PrivateVpc2Subnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PrivateVpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc2-Subnet1"

  PrivateVpc2Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateVpc2Subnet1RouteTable
      SubnetId: !Ref PrivateVpc2Subnet1

  PrivateVpc2Subnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref PrivateVpc2SecurityGroupForEc2
      SubnetId: !Ref PrivateVpc2Subnet1
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PrivateVpc2-Subnet1-Instance"

  PrivateVpc2SecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-PrivateVpc2-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic by default"
          IpProtocol: -1
      VpcId: !Ref PrivateVpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc2-ForInstance"

  PrivateVpc2SecurityGroupIngressFromPrivateVpc1Ec2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt PrivateVpc2SecurityGroupForEc2.GroupId
      CidrIp: !Ref PrivateVpc1CidrBlock
      FromPort: 22
      ToPort: 22

  PrivateVpc2SecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-PrivateVpc2-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt PrivateVpc2SecurityGroupForEc2.GroupId
          Description: "Endpoint needs HTTPS from EC2"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref PrivateVpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateVpc2-ForEndPoint"

  PrivateVpc2EndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt PrivateVpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref PrivateVpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref PrivateVpc2

  PrivateVpc2EndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt PrivateVpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref PrivateVpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref PrivateVpc2

  PrivateVpc2EndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt PrivateVpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref PrivateVpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref PrivateVpc2

  PrivateVpc2EndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PrivateVpc2Subnet1RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref PrivateVpc2

  # Transit Gateway
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      DefaultRouteTableAssociation: disable
      DefaultRouteTablePropagation: disable
      Description: !Sub "Generated by ${AWS::StackName}"
      DnsSupport: enable
      MulticastSupport: disable
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TransitGateway"

  TransitGatewayRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TransitGatewayRouteTable"
      TransitGatewayId: !Ref TransitGateway

  TransitGatewayAttachmentToGatewayVpc:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref GatewayVpcSubnet1
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref GatewayVpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TransitGatewayAttachmentToGatewayVpc"

  TransitGatewayRouteTableAssociationToGatewayVpc:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachmentToGatewayVpc
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TransitGatewayRouteToGatewayVpc:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachmentToGatewayVpc
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TransitGatewayAttachmentToPrivateVpc1:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref PrivateVpc1Subnet1
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref PrivateVpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TransitGatewayAttachmentToPrivateVpc1"

  TransitGatewayRouteTableAssociationToPrivateVpc1:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachmentToPrivateVpc1
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TransitGatewayRouteToPrivateVpc1:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: !Ref PrivateVpc1CidrBlock
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachmentToPrivateVpc1
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TransitGatewayAttachmentToPrivateVpc2:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref PrivateVpc2Subnet1
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref PrivateVpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TransitGatewayAttachmentToPrivateVpc2"

  TransitGatewayRouteTableAssociationToPrivateVpc2:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachmentToPrivateVpc2
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TransitGatewayRouteToPrivateVpc2:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: !Ref PrivateVpc2CidrBlock
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachmentToPrivateVpc2
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  GatewayVpcSubnet1RoutePrivateVpc1ToTransitGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet1RouteTable
      DestinationCidrBlock: !Ref PrivateVpc1CidrBlock
      TransitGatewayId: !Ref TransitGateway
    DependsOn: TransitGatewayAttachmentToGatewayVpc

  GatewayVpcSubnet1RoutePrivateVpc2ToTransitGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet1RouteTable
      DestinationCidrBlock: !Ref PrivateVpc2CidrBlock
      TransitGatewayId: !Ref TransitGateway
    DependsOn: TransitGatewayAttachmentToGatewayVpc

  GatewayVpcSubnet2RoutePrivateVpc1ToTransitGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet2RouteTable
      DestinationCidrBlock: !Ref PrivateVpc1CidrBlock
      TransitGatewayId: !Ref TransitGateway
    DependsOn: TransitGatewayAttachmentToGatewayVpc

  GatewayVpcSubnet2RoutePrivateVpc2ToTransitGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GatewayVpcSubnet2RouteTable
      DestinationCidrBlock: !Ref PrivateVpc2CidrBlock
      TransitGatewayId: !Ref TransitGateway
    DependsOn: TransitGatewayAttachmentToGatewayVpc

  PrivateVpc1Subnet1RouteToTransitGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateVpc1Subnet1RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref TransitGateway
    DependsOn: TransitGatewayAttachmentToPrivateVpc1

  PrivateVpc2Subnet1RouteToTransitGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateVpc2Subnet1RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref TransitGateway
    DependsOn: TransitGatewayAttachmentToPrivateVpc2
