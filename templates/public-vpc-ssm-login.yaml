#
# PublicのVPCを構築してSSMでログインする検証
#
# InternetへのRoutingはMyIpAddressのみ許可
#
AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Make Public VPC for SSM Login

Parameters:
  VpcCidrBlock:
    Type: String
    Description: VPC's CidrBlock
    Default: 192.168.0.0/24
  VpcSubnetCidrBlock:
    Type: String
    Description: VPC Subnets CidrBlock
    Default: 192.168.0.0/28
  MyIpAddressCidrBlock:
    Type: String
    Description: Your IP Address(xx.xx.xx.xx/32)
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d
  hasVpce:
    Type: String
    Description: "If you want to use VPC Endpoint for SSM, set true"
    AllowedValues:
      - "true"
      - "false"
  hasS3:
    Type: String
    Description: "If you want to use VPC Endpoint for S3, set true"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  hasVpce: !Equals [!Ref hasVpce, "true"]
  hasS3Gateway: !Equals [!Ref hasS3, "true"]

Resources:

  RoleForInstance:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
              - "ssm:GetParameters"
            Resource:
              - "*"
      Roles:
        - !Ref RoleForInstance

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  ##############################################################################
  # Vpc
  ##############################################################################
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"

  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"

  VpcVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref VpcInternetGateway

  VpcSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref VpcSubnetCidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-Subnet"

  # Route Table
  VpcSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-Subnet"

  VpcSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcSubnetRouteTable
      SubnetId: !Ref VpcSubnet

  VpcSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcSubnetRouteTable
      DestinationCidrBlock: !Sub "${MyIpAddressCidrBlock}"
      GatewayId: !Ref VpcInternetGateway

  # Network ACL
  VpcSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-Subnet"

  VpcSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref VpcSubnetNetworkAcl
      SubnetId: !Ref VpcSubnet

  VpcSubnetNetworkAclEntryIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcSubnetNetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      CidrBlock: !Sub "${MyIpAddressCidrBlock}"

  VpcSubnetNetworkAclEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcSubnetNetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      CidrBlock: !Sub "${MyIpAddressCidrBlock}"

  # EC2 Instance
  VpcSubnetEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !GetAtt VpcSecurityGroupForEc2.GroupId
          SubnetId: !Ref VpcSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc-Subnet-Instance"

  VpcSecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic by default"
          IpProtocol: -1
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-ForInstance"

  # VPC Endpoint
  VpcSecurityGroupForEndPoint:
    Condition: hasVpce
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt VpcSecurityGroupForEc2.GroupId
          Description: "Endpoint needs HTTPS from EC2"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-ForEndPoint"

  VpcEndPointForSsm:
    Condition: hasVpce
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForSsmMessages:
    Condition: hasVpce
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForEc2Messages:
    Condition: hasVpce
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  # To set PrivateDnsOnlyForInboundResolverEndpoint to true,
  # the VPC must have a Gateway endpoint for the service.
  VpcEndPointForS3Gateway:
    Condition: hasS3Gateway
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref VpcSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc

  # Network ACL for S3 Gateway
  VpcSubnetNetworkAclEntryEgressForS3Gateway:
    Condition: hasS3Gateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcSubnetNetworkAcl
      Egress: true
      RuleNumber: 101
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  VpcSubnetNetworkAclEntryIngressForS3Gateway:
    Condition: hasS3Gateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcSubnetNetworkAcl
      Egress: false
      RuleNumber: 101
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"
