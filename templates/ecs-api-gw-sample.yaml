#
# Amazon FargateのアプリケーションをAPI Gateway経由で公開する
# APIGatewayで内向けALBを公開
# https://qiita.com/ykdevs/items/fa84ec68491d2e1273e7
#
Parameters:
  ApigwPort:
    Type: Number
    Description: API Gateway Global Port
    Default: 443
  AlbPort:
    Type: Number
    Description: ALB Local Port
    Default: 80
  ContainerPort:
    Type: Number
    Description: Container Local Port
    Default: 8080
  EcrImageName:
    Type: String
    Description: ECR Image Name
    Default: ykdevs-sample/spring-sample
Resources:
  # Make VPC
  EcsApigwSampleVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: EcsApigwSample

  # Make InternetGateway
  EcsApigwSampleInternetGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: EcsApigwSample

  # Make VPCGatewayAttachment
  EcsApigwSampleVPCGW:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref EcsApigwSampleVPC
      InternetGatewayId: !Ref EcsApigwSampleInternetGW
    DependsOn:
      - EcsApigwSampleVPC
      - EcsApigwSampleInternetGW

  # Make PublicSubnet
  EcsApigwSampleSubnet1Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref EcsApigwSampleVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: >-
            EcsApigwSample/PublicSubnet1
    DependsOn:
      - EcsApigwSampleVPC

  # Make RouteTable
  EcsApigwSampleSubnet1RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EcsApigwSampleVPC
      Tags:
        - Key: Name
          Value: >-
            EcsApigwSample/PublicSubnet1
    DependsOn:
      - EcsApigwSampleVPC

  # Make RouteTableAssociation
  EcsApigwSampleRouteSubnet1TableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref EcsApigwSampleSubnet1RouteTable
      SubnetId: !Ref EcsApigwSampleSubnet1Subnet
    DependsOn:
      - EcsApigwSampleSubnet1Subnet
      - EcsApigwSampleSubnet1RouteTable

  # Make Route
  EcsApigwSampleSubnet1DefaultRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref EcsApigwSampleSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EcsApigwSampleInternetGW
    DependsOn:
      - EcsApigwSampleSubnet1RouteTable
      - EcsApigwSampleInternetGW

  # Make PublicSubnet
  EcsApigwSampleSubnet2Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref EcsApigwSampleVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: >-
            EcsApigwSample/PublicSubnet2
    DependsOn:
      - EcsApigwSampleVPC

  # Make RouteTable
  EcsApigwSampleSubnet2RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EcsApigwSampleVPC
      Tags:
        - Key: Name
          Value: >-
            EcsApigwSample/PublicSubnet2
    DependsOn:
      - EcsApigwSampleVPC

  # Make RouteTableAssociation
  EcsApigwSampleSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref EcsApigwSampleSubnet2RouteTable
      SubnetId: !Ref EcsApigwSampleSubnet2Subnet
    DependsOn:
      - EcsApigwSampleSubnet2RouteTable
      - EcsApigwSampleSubnet2Subnet

  # Make Route
  EcsApigwSampleSubnet2DefaultRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref EcsApigwSampleSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EcsApigwSampleInternetGW
    DependsOn:
      - EcsApigwSampleSubnet2RouteTable
      - EcsApigwSampleInternetGW

  # Make SecurityGroup
  EcsApigwSampleSecurityGroupForEcs:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: EcsApigwSample/SecurityGroupForEcs
      GroupDescription: >-
        SecurityGroup For ECS
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref EcsApigwSampleVPC
      Tags:
        - Key: Name
          Value: EcsApigwSample/SecurityGroupForEcs
    DependsOn:
      - EcsApigwSampleVPC

  # Make SecurityGroupIngress
  EcsApigwSampleSecurityGroupIngressForEcs:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      GroupId: !GetAtt
        - EcsApigwSampleSecurityGroupForEcs
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - EcsApigwSampleSecurityGroupForAlb
        - GroupId
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
    DependsOn:
      - EcsApigwSampleSecurityGroupForEcs
      - EcsApigwSampleSecurityGroupForAlb

  # Make SecurityGroup
  EcsApigwSampleSecurityGroupForAlb:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: EcsApigwSample/SecurityGroupForAlb
      GroupDescription: >-
        SecurityGroup For ALB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: !Sub
            - "Allow from anyone on port ${Port}"
            - { "Port": !Ref AlbPort }
          IpProtocol: tcp
          FromPort: !Ref AlbPort
          ToPort: !Ref AlbPort
      VpcId: !Ref EcsApigwSampleVPC
      Tags:
        - Key: Name
          Value: EcsApigwSample/SecurityGroupForAlb
    DependsOn:
      - EcsApigwSampleVPC

  # Make SecurityGroupEgress
  EcsApigwSampleSecurityGroupEgressForAlb:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt
        - EcsApigwSampleSecurityGroupForAlb
        - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt
        - EcsApigwSampleSecurityGroupForEcs
        - GroupId
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
    DependsOn:
      - EcsApigwSampleSecurityGroupForEcs
      - EcsApigwSampleSecurityGroupForAlb

  # Make Internal LoadBalancer
  EcsApigwSampleLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
      Scheme: internal
      SecurityGroups:
        - !GetAtt
          - EcsApigwSampleSecurityGroupForAlb
          - GroupId
      Subnets:
        - !Ref EcsApigwSampleSubnet1Subnet
        - !Ref EcsApigwSampleSubnet2Subnet
      Type: application
    DependsOn:
      - EcsApigwSampleSecurityGroupForAlb
      - EcsApigwSampleSubnet1Subnet
      - EcsApigwSampleSubnet2Subnet

  # Make HTTP Listener
  EcsApigwSampleAlbListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref EcsApigwSampleAlbTargetGroup
          Type: forward
      LoadBalancerArn: !Ref EcsApigwSampleLoadBalancer
      Port: !Ref AlbPort
      Protocol: HTTP
    DependsOn:
      - EcsApigwSampleAlbTargetGroup
      - EcsApigwSampleLoadBalancer

  # Make TargetGroup
  EcsApigwSampleAlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref EcsApigwSampleVPC
    DependsOn:
      - EcsApigwSampleVPC

  # Make LogGroup
  EcsApigwSampleServiceTaskDefLogGroup:
    Type: 'AWS::Logs::LogGroup'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  # Make IAM Role
  EcsApigwSampleServiceTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17

  # Make IAM Policy
  EcsApigwSampleServiceTaskDefExecutionRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: !GetAtt
              - EcsApigwSampleServiceTaskDefLogGroup
              - Arn
          - Action:
              - 'ecr:BatchGetImage'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:DescribeRepositories'
              - 'ecr:DescribeImage'
            Resource: "*"
            Effect: Allow
        Version: 2012-10-17
      PolicyName: >-
        EcsApigwSampleServiceTaskDefExecutionRoleDefaultPolicy
      Roles:
        - !Ref EcsApigwSampleServiceTaskExecutionRole
    DependsOn:
      - EcsApigwSampleServiceTaskDefLogGroup
      - EcsApigwSampleServiceTaskExecutionRole

  # Make Cluster
  EcsApigwSampleCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: EcsApigwSampleCluster
    DependsOn:
      - EcsApigwSampleAlbListener
      - EcsApigwSampleAlbTargetGroup

  # Make IAM::Role
  EcsApigwSampleServiceTaskDefTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17

  # Make TaskDefinition
  EcsApigwSampleServiceTaskDef:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}"
            - { ImageName: !Ref EcrImageName }
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsApigwSampleServiceTaskDefLogGroup
              awslogs-stream-prefix: ecs
              awslogs-region: !Ref 'AWS::Region'
          Name: web
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
      Cpu: '512'
      ExecutionRoleArn: !GetAtt
        - EcsApigwSampleServiceTaskExecutionRole
        - Arn
      Family: >-
        EcsApigwSampleServiceTaskDef
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt
        - EcsApigwSampleServiceTaskDefTaskRole
        - Arn
    DependsOn:
      - EcsApigwSampleCluster
      - EcsApigwSampleServiceTaskDefLogGroup
      - EcsApigwSampleServiceTaskExecutionRole
      - EcsApigwSampleServiceTaskDefTaskRole

  # Make Service
  EcsApigwSampleService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsApigwSampleCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref EcsApigwSampleAlbTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt
              - EcsApigwSampleSecurityGroupForEcs
              - GroupId
          Subnets:
            - !Ref EcsApigwSampleSubnet1Subnet
            - !Ref EcsApigwSampleSubnet2Subnet
      TaskDefinition: !Ref EcsApigwSampleServiceTaskDef
    DependsOn:
      - EcsApigwSampleCluster
      - EcsApigwSampleAlbTargetGroup
      - EcsApigwSampleSecurityGroupForEcs
      - EcsApigwSampleSubnet1Subnet
      - EcsApigwSampleSubnet2Subnet
      - EcsApigwSampleServiceTaskDef

  # Make VPC Link
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-vpclink.html
  EcsApigwSampleVpcLink:
    Type: 'AWS::ApiGatewayV2::VpcLink'
    Properties:
      Name: 'EcsApigwSampleVpcLink'
      SubnetIds:
        - !Ref EcsApigwSampleSubnet1Subnet
        - !Ref EcsApigwSampleSubnet2Subnet
    DependsOn:
      - EcsApigwSampleSubnet1Subnet
      - EcsApigwSampleSubnet2Subnet

  # Make Api
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-vpclink.html
  EcsApigwSampleApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: 'EcsApigwSampleApi'
      Description: 'EcsApigwSample/ApiGateway'
      ProtocolType: HTTP

  # Make Api Stage
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-stage.html
  EcsApigwSampleApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: '$default'
      ApiId: !Ref EcsApigwSampleApi
    DependsOn:
      - EcsApigwSampleApi

  # Make Api Integration
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integration.html
  EcsApigwSampleApiIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref EcsApigwSampleApi
      ConnectionId: !Ref EcsApigwSampleVpcLink
      ConnectionType: 'VPC_LINK'
      Description: 'EcsApigwSampleApiIntegration'
      IntegrationMethod: 'ANY'
      IntegrationType: 'HTTP_PROXY'
      IntegrationUri: !Ref EcsApigwSampleAlbListener
      PayloadFormatVersion: 1.0
    DependsOn:
      - EcsApigwSampleApi
      - EcsApigwSampleVpcLink
      - EcsApigwSampleAlbListener

  # Make Api Route
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-route.html
  EcsApigwSampleApiRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref EcsApigwSampleApi
      RouteKey: 'ANY /{proxy+}'
      Target: !Sub
        - "integrations/${IntegrationId}"
        - { IntegrationId: !Ref EcsApigwSampleApiIntegration }
    DependsOn:
      - EcsApigwSampleApi
      - EcsApigwSampleApiIntegration

  # Make Api Deployment
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-deployment.html
  EcsApigwSampleApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref EcsApigwSampleApi
      Description: 'EcsApigwSampleApiDeployment'
      StageName: '$default'
    DeletionPolicy: Retain
    DependsOn:
      - EcsApigwSampleApi
      - EcsApigwSampleApiRoute

# Outputs
# https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
Outputs:
  EcsApigwSampleExternalURL:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref EcsApigwSampleApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com'
