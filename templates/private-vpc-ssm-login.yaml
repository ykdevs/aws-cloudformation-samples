#
# PrivateのVPCを構築してSSMでログインする検証
#
# System ManagerのQuick Setupが必要
# 更にAWS-QuickSetup-SSMHostMgmt-CollectInventoryの関連付けで30分必要な場合もある
#
Parameters:
  VpcCidrBlock:
    Type: String
    Description: VPC's CidrBlock
    Default: 192.168.0.0/24
  VpcSubnetCidrBlock:
    Type: String
    Description: VPC Subnet's CidrBlock
    Default: 192.168.0.0/28
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d

Resources:

  RoleForInstance:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - s3:*
              - ssm:GetParameters
      Roles:
        - !Ref RoleForInstance

  VpcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  # Vpc
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"

  VpcSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref VpcSubnetCidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-Subnet"

  VpcSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-Subnet"

  VpcSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcSubnetRouteTable
      SubnetId: !Ref VpcSubnet

  VpcSubnetEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref VpcSecurityGroupForEc2
      SubnetId: !Ref VpcSubnet
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc-Subnet-Instance1"

  VpcSecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-ForInstance"

  VpcSecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-ForEndPoint"

  VpcSecurityGroupIngressForEndPoint:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SourceSecurityGroupId: !GetAtt VpcSecurityGroupForEc2.GroupId
      FromPort: 443
      ToPort: 443

  VpcEndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref VpcSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc
