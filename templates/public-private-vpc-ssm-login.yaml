#
# Public, PrivateのVPCを構築してSSMでログインする検証
#
# InternetへのRoutingはMyIpAddressのみ許可
#
# ----------------------------------------------------------------------------------------------
# VPCEndpoint.PrivateDnsEnabled: trueにしないと「SSM Agent is not online」となり接続できない
#
# ----------------------------------------------------------------------------------------------
# VPC内に同じDNS名を持つVPCEndpointがあるとエラーになる
# Resource handler returned message: "private-dns-enabled cannot be set because there is already
# a conflicting DNS domain for ssm.ap-northeast-1.amazonaws.com in the VPC vpc-02bfdba1e993470cc"
#
# つまり、PublicSubnetとPrivateSubnetの両方にVPC Endpointを作成できないため以下はエラーになる
#
#  VpcPublicSubnetEndPointForSsm:
#    Type: AWS::EC2::VPCEndpoint
#
#  VpcPrivateSubnetEndPointForSsm:
#    Type: AWS::EC2::VPCEndpoint
#
# ----------------------------------------------------------------------------------------------
# VPCの同一AvailabilityZoneに同じVPC Endpointがあるとエラーになる
# Resource handler returned message:
# "Found another VPC endpoint subnet in the availability zone of subnet-0d5e9b2f6a1f452f5.
# VPC endpoint subnets should be in different availability zones supported by the VPC endpoint service."
#
# つまり、VPC EndPointを共有する場合は、異なるAvailabilityZoneに作成する必要があるり以下がお同じだとエラーになる
#
#  SubnetIds:
#    - !Ref VpcPublicSubnet
#    - !Ref VpcPrivateSubnet
#
# ----------------------------------------------------------------------------------------------
#
# 同じVPC内の別SubnetのEndpointを共有する場合にPublicIPを持っていると「SSM Agent is not online」となり接続できない
#
#
AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Make Public And Private VPC for SSM Login

Parameters:
  VpcCidrBlock:
    Type: String
    Description: VPC's CidrBlock
    Default: 192.168.0.0/24
  VpcPrivateSubnetCidrBlock:
    Type: String
    Description: VPC Subnets CidrBlock
    Default: 192.168.0.0/28
  VpcPublicSubnetCidrBlock:
    Type: String
    Description: VPC Subnets CidrBlock
    Default: 192.168.0.16/28
  MyIpAddressCidrBlock:
    Type: String
    Description: Your IP Address(xx.xx.xx.xx/32)
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d
  HasPrivateEc2:
    Type: String
    Description: Whether to create EC2 instance or not
    AllowedValues:
      - "true"
      - "false"
  HasPublicEc2:
    Type: String
    Description: Whether to create EC2 instance or not
    AllowedValues:
      - "true"
      - "false"
  HasNetworkAcl:
    Type: String
    Description: Whether to create Network ACL or not
    AllowedValues:
      - "true"
      - "false"

Conditions:
  hasPrivateEc2: !Equals [ !Ref HasPrivateEc2, "true" ]
  hasPublicEc2: !Equals [ !Ref HasPublicEc2, "true" ]
  hasEc2: !Or [ Condition: hasPrivateEc2, Condition: hasPublicEc2 ]
  hasNetworkAcl: !And [!Equals [ !Ref HasNetworkAcl, "true" ], Condition: hasEc2]

Resources:

  ##############################################################################
  # IAM Role for EC2 Instance
  ##############################################################################
  RoleForInstance:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
              - "ssm:GetParameters"
            Resource:
              - "*"
      Roles:
        - !Ref RoleForInstance

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  ##############################################################################
  # VPC
  #  - VPC InternetGateway
  #  - VPC PublicSubnet
  #    - VPC PublicSubnet EC2 Instance
  #    - VPC PublicSubnet NAT Gateway
  #  - VPC PrivateSubnet
  #    - VPC PrivateSubnet EC2 Instance
  ##############################################################################
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"

  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"

  VpcVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref VpcInternetGateway

  # PrivateSubnet for VPC
  VpcPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref VpcPrivateSubnetCidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PrivateSubnet"

  VpcPrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PrivateSubnet"

  VpcPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcPrivateSubnetRouteTable
      SubnetId: !Ref VpcPrivateSubnet

  # Private Subnet Default Route to NAT Gateway
  VpcPrivateSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcPrivateSubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref VpcPublicSubnetNatGateway

  # PublicSubnet for VPC
  VpcPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref VpcPublicSubnetCidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PublicSubnet"

  VpcPublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PublicSubnet"

  VpcPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcPublicSubnetRouteTable
      SubnetId: !Ref VpcPublicSubnet

  # Allow traffic from VPC PublicSubnet to Internet
  VpcPublicSubnetDefaultRoute:
    Condition: hasPublicEc2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcPublicSubnetRouteTable
      DestinationCidrBlock: !Ref MyIpAddressCidrBlock
      GatewayId: !Ref VpcInternetGateway

  VpcPublicSubnetNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      SubnetId: !Ref VpcPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PublicSubnet"

  # Network ACL for VPC PublicSubnet
  VpcPublicSubnetNetworkAcl:
    Condition: hasNetworkAcl
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PublicSubnet"

  VpcPublicSubnetNetworkAclAssociation:
    Condition: hasNetworkAcl
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref VpcPublicSubnetNetworkAcl
      SubnetId: !Ref VpcPublicSubnet

  # Allow Any from VPC local
  VpcPublicSubnetNetworkAclEntryIngressSshFromLocal:
    Condition: hasNetworkAcl
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcPublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref VpcCidrBlock

  VpcPublicSubnetNetworkAclEntryIngressSshFromInternet:
    Condition: hasNetworkAcl
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcPublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 101
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      CidrBlock: !Ref MyIpAddressCidrBlock

  # Network ACL for S3 Gateway
  VpcPublicSubnetNetworkAclEntryIngressForS3Gateway:
    Condition: hasNetworkAcl
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcPublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 102
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  # Allow Any from VPC PublicSubnet to Local
  VpcPublicSubnetNetworkAclEntryEgressToLocal:
    Condition: hasNetworkAcl
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcPublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref VpcCidrBlock

  # Allow HTTPS from VPC PublicSubnet to Any
  VpcPublicSubnetNetworkAclEntryEgress:
    Condition: hasNetworkAcl
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcPublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 101
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  ##############################################################################
  # EndPoint for VPC
  ##############################################################################
  VpcSecurityGroupForEndPoint:
    Condition: hasEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - Description: "Allow HTTPS from Endpoint to VPC"
          CidrIp: !Ref VpcCidrBlock
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-ForEndPoint"

  VpcEndPointForSsm:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcPublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForSsmMessages:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcPublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForEc2Messages:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt VpcSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref VpcPublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc

  VpcEndPointForS3:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref VpcPublicSubnetRouteTable
        - !Ref VpcPrivateSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc

  ##############################################################################
  # EC2 Instance for VPC PublicSubnet
  ##############################################################################
  VpcPublicSubnetEC2Instance:
    Condition: hasPublicEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !GetAtt VpcPublicSubnetSecurityGroupForEc2.GroupId
          SubnetId: !Ref VpcPublicSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc-PublicSubnet-Instance"

  VpcPublicSubnetSecurityGroupForEc2:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc-PublicSubnet-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PublicSubnet-ForInstance"

  VpcPublicSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VpcPublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref VpcCidrBlock
      IpProtocol: -1

  VpcPublicSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt VpcPublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: !Ref VpcCidrBlock
      IpProtocol: -1

  VpcPublicSubnetSecurityGroupEgressForEc2ToS3Gateway:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt VpcPublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to S3 Gateway"
      CidrIp: "0.0.0.0/0"
      IpProtocol: -1

  VpcPublicSubnetSecurityGroupIngressForEc2FromInternet:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VpcPublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from other VPC to EC2"
      CidrIp: !Ref MyIpAddressCidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  VpcPublicSubnetSecurityGroupEgressForEc2ToInternet:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt VpcPublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow HTTPS from EC2 to Internet"
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  VpcPublicSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VpcSecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt VpcPublicSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ##############################################################################
  # EC2 Instance for VPC PrivateSubnet
  ##############################################################################
  VpcPrivateSubnetEC2Instance:
    Condition: hasPrivateEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref VpcPrivateSubnetSecurityGroupForEc2
      SubnetId: !Ref VpcPrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc-PrivateSubnet-Instance"

  VpcPrivateSubnetSecurityGroupForEc2:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc-PrivateSubnet-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc-PrivateSubnet-ForInstance"

  VpcPrivateSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VpcPrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref VpcCidrBlock
      IpProtocol: -1

  VpcPrivateSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt VpcPrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: "0.0.0.0/0"
      IpProtocol: -1

  VpcPrivateSubnetSecurityGroupIngressForEc2FromInternet:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VpcPrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from other VPC to EC2"
      CidrIp: !Ref MyIpAddressCidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  VpcPrivateSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VpcSecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt VpcPrivateSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
