#
# 2つのVPCを構築してVPC Peeringで接続する検証
#
Parameters:
  Vpc1CidrBlock:
    Type: String
    Description: VPC1's CidrBlock
    Default: 172.16.0.0/24
  Vpc1Subnet1CidrBlock:
    Type: String
    Description: VPC1 Subnet1's CidrBlock
    Default: 172.16.0.0/28
  Vpc2CidrBlock:
    Type: String
    Description: VPC2's CidrBlock
    Default: 172.16.1.0/24
  Vpc2Subnet1CidrBlock:
    Type: String
    Description: VPC2 Subnet1's CidrBlock
    Default: 172.16.1.0/28
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d

Resources:

  RoleForInstance:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - s3:*
              - ssm:GetParameters
      Roles:
        - !Ref RoleForInstance

  VpcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  # VPC1
  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1Subnet1CidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1"

  Vpc1Subnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1"

  Vpc1Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1Subnet1RouteTable
      SubnetId: !Ref Vpc1Subnet1

  Vpc1Subnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc1SecurityGroupForEc2
      SubnetId: !Ref Vpc1Subnet1
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1-Instance1"

  Vpc1SecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-ForInstance"

  Vpc1SecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"

  Vpc1SecurityGroupIngressForEndPoint:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SourceSecurityGroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      FromPort: 443
      ToPort: 443

  Vpc1EndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc1Subnet1RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc1

  # VPC2
  Vpc2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc2CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2"

  Vpc2Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc2Subnet1CidrBlock
      VpcId: !Ref Vpc2
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-Subnet1"

  Vpc2Subnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-Subnet1"

  Vpc2Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc2Subnet1RouteTable
      SubnetId: !Ref Vpc2Subnet1

  Vpc2Subnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc2SecurityGroupForEc2
      SubnetId: !Ref Vpc2Subnet1
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc2-Subnet1-Instance1"

  Vpc2SecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-ForInstance"

  Vpc2SecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-ForEndPoint"

  Vpc2SecurityGroupIngressForEndPoint:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SourceSecurityGroupId: !GetAtt Vpc2SecurityGroupForEc2.GroupId
      FromPort: 443
      ToPort: 443

  Vpc2EndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc2Subnet1RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc2

  # VPC Peering to VPC2
  VpcPeeringBetweenVpc1ToVpc2:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerOwnerId: !Sub ${AWS::AccountId}
      PeerRegion: !Sub ${AWS::Region}
      PeerVpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Between-Vpc1-to-Vpc2"
      VpcId: !Ref Vpc1

  Vpc1RouteFromVpc1ToVpc2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1Subnet1RouteTable
      DestinationCidrBlock: !Ref Vpc2CidrBlock
      VpcPeeringConnectionId: !Ref VpcPeeringBetweenVpc1ToVpc2

  Vpc1RouteFromVpc2ToVpc1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc2Subnet1RouteTable
      DestinationCidrBlock: !Ref Vpc1CidrBlock
      VpcPeeringConnectionId: !Ref VpcPeeringBetweenVpc1ToVpc2

  Vpc1SecurityGroupIngressForVpc2Instance:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      SourceSecurityGroupId: !GetAtt Vpc2SecurityGroupForEc2.GroupId
      FromPort: 22
      ToPort: 22

  Vpc2SecurityGroupIngressForVpc1Instance:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc2SecurityGroupForEc2.GroupId
      SourceSecurityGroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      FromPort: 22
      ToPort: 22
