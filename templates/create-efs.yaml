#
# PrivateSubnet1,2にEFSを構築する
#
Parameters:
  PrivateSubnet1Id:
    Description: Private Subnet1 Id
    Type: AWS::EC2::SecurityGroup::Id

  PrivateSubnet2Id:
    Description: Private Subnet2 Id
    Type: AWS::EC2::SecurityGroup::Id

Resources:
  # Make SecurityGroup
  SecurityGroupForEfs:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub
        - "${AWS::StackName}-SgForEFS"
      GroupDescription: !Sub
        - "${AWS::StackName}-Security Group For EFS"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-SgForEFS"

  # Make Key for EFS Encryption
  KeyForEfs:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Key For EFS Encryption
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub
          - "${AWS::StackName}-elasticfilesystem"
        Statement:
          - Sid: Allow access to EFS for all principals in the account that are authorized to use EFS
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:CreateGrant"
              - "kms:DescribeKey"
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub
                  - "elasticfilesystem.${AWS::Region}.amazonaws.com"
          - Sid: Allow direct access to key metadata to the account
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - 'kms:Describe*'
              - 'kms:Get*'
              - 'kms:List*'
              - 'kms:RevokeGrant'
            Resource: '*'
      KeySpec: "SYMMETRIC_DEFAULT"
      KeyUsage: "ENCRYPT_DECRYPT"
      MultiRegion: false
  KeyAliasForEfs:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub
        - "aws/elasticfilesystem-${AWS::StackName}"
      TargetKeyId: !Ref KeyForEfs

  # Make FileSystem
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: "ENABLED"
      Encrypted: true
      FileSystemPolicy: Json
      FileSystemTags:
        - "Key": Name
          "Value": !Sub
            - "${AWS::StackName}-FileSystem"
      KmsKeyId: !Ref KeyForEfs
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      Tags:
        - Key: Name
          Value: !Sub
            - "${AWS::StackName}-EFS"

  # Mount Target
  MountTargetResource1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet1Id
      SecurityGroups:
        - !GetAtt
          - SecurityGroupForEfs
          - GroupId
  # Mount Target
  MountTargetResource2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet2Id
      SecurityGroups:
        - !GetAtt
          - SecurityGroupForEfs
          - GroupId

# Outputs
Outputs:
  FileSystemId:
    Value: !Ref FileSystem
    Description: FileSystem Id