#
# 以下のSubnetをもつVPC構築
# PublicSubnet1,2
# PrivateSubnet1,2
#
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Make Private VPC for SSM Login

Parameters:
  VpcCidrBlock:
    Type: String
    Description: VPC's CidrBlock
    Default: 10.0.0.0/16
  PrivateSubnet1CidrBlock:
    Type: String
    Description: Private Subnet1's CidrBlock
    Default: 10.0.0.0/24
  PrivateSubnet2CidrBlock:
    Type: String
    Description: Private Subnet2's CidrBlock
    Default: 10.0.1.0/24
  PublicSubnet1CidrBlock:
    Type: String
    Description: Public Subnet1's CidrBlock
    Default: 10.0.128.0/18
  PublicSubnet2CidrBlock:
    Type: String
    Description: Public Subnet2's CidrBlock
    Default: 10.0.192.0/18

Resources:
  # Make VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Make InternetGateway
  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  # Make VPCGatewayAttachment
  VpcGw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGW
    DependsOn:
      - Vpc
      - InternetGW

  # Make PublicSubnet1
  PublicSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
    DependsOn:
      - Vpc
  # Make RouteTable
  PublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
    DependsOn:
      - Vpc
  # Make RouteTableAssociation
  RouteSubnet1TableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnet1RouteTable
      SubnetId: !Ref PublicSubnet1Subnet
    DependsOn:
      - PublicSubnet1Subnet
      - PublicSubnet1RouteTable
  # Make Route
  PublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW
    DependsOn:
      - PublicSubnet1RouteTable
      - InternetGW

  # Make PublicSubnet2
  PublicSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
    DependsOn:
      - Vpc
  # Make RouteTable
  PublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
    DependsOn:
      - Vpc
  # Make RouteTableAssociation
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnet2RouteTable
      SubnetId: !Ref PublicSubnet2Subnet
    DependsOn:
      - PublicSubnet2RouteTable
      - PublicSubnet2Subnet
  # Make Route
  PublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW
    DependsOn:
      - PublicSubnet2RouteTable
      - InternetGW

  # Make EIP
  PublicSubnet1Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
  # Make NatGateway
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet1Eip.AllocationId
      SubnetId: !Ref PublicSubnet1Subnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"

  # Make PrivateSubnet1
  PrivateSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1"
  # Make RouteTable
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1"
    DependsOn:
      - Vpc
  # Make RouteTableAssociation
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1Subnet
    DependsOn:
      - PrivateSubnet1RouteTable
      - PrivateSubnet1Subnet
  # Make Route
  PrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway1
    DependsOn:
      - PrivateSubnet1RouteTable
      - NatGateway1

  # Make EIP
  PublicSubnet2Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
  # Make NetGateway
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet2Eip.AllocationId
      SubnetId: !Ref PublicSubnet2Subnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"

  # Make PrivateSubnet2
  PrivateSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2CidrBlock
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2"
  # Make RouteTable
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2"
    DependsOn:
      - Vpc
  # Make RouteTableAssociation
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2Subnet
    DependsOn:
      - PrivateSubnet2RouteTable
      - PrivateSubnet2Subnet
  # Make Route
  PrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway2
    DependsOn:
      - PrivateSubnet2RouteTable
      - NatGateway2

# Outputs
Outputs:
  VpcId:
    Value: !Ref Vpc
    Description: VPC Id

  InternetGatewayId:
    Value: !Ref InternetGW
    Description: Internet Gateway Id

  NatGateway1:
    Value: !Ref NatGateway1
    Description: Public Subnet1 NatGateway Id

  NatGateway2:
    Value: !Ref NatGateway2
    Description: Public Subnet2 NatGateway Id

  PublicSubnet1Id:
    Value: !Ref PublicSubnet1Subnet
    Description: Public Subnet1 Id

  PublicSubnet2Id:
    Value: !Ref PublicSubnet2Subnet
    Description: Public Subnet2 Id

  PrivateSubnet1Id:
    Value: !Ref PrivateSubnet1Subnet
    Description: Private Subnet1 Id

  PrivateSubnet2Id:
    Value: !Ref PrivateSubnet2Subnet
    Description: Private Subnet2 Id
