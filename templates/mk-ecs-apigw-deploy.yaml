#
# Make Deploy Pipeline
#
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Make Deploy Pipeline

Parameters:
  AlbStackName:
    Type: String
    Description: Name of mk-ecs-apigw-alb Stack
    Default: sample-app-alb
  EcsStackName:
    Type: String
    Description: Name of mk-ecs-apigw-ecs-deploy Stack
    Default: sample-app
  ProjectName:
    Type: String
    Description: Code Build Project Name
    Default: code-build-sample2
  GitHubConnectionArn:
    Type: String
    Description: GitHub Connection Arn
    Default: arn:aws:codestar-connections:ap-northeast-1:204633429525:connection/8783a866-9af3-4c29-b10f-20b22664d293
  GitHubRepository:
    Type: String
    Description: Github Repository Name
    Default: ykdevs/code-build-sample
  GitHubRepositoryBranch:
    Type: String
    Description: Github Repository Branch Name
    Default: main
Resources:
  # Create S3 Bucket For Artifact
  SampleS3BucketForPipeline:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "codepipeline-${AWS::Region}-${ProjectName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Create CoeBuildRole
  SampleCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
             - "sts:AssumeRole"
            Principal:
              Service: codebuild.amazonaws.com
        Version: 2012-10-17

  # Create CodeBuildPolicy
  SampleCodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}:*"
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:GetBucketAcl"
              - "s3:GetBucketLocation"
            Resource:
              - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*"
          - Effect: Allow
            Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:CompleteLayerUpload"
              - "ecr:GetAuthorizationToken"
              - "ecr:InitiateLayerUpload"
              - "ecr:PutImage"
              - "ecr:UploadLayerPart"
              - "ecs:describeTaskDefinition"
            Resource: "*"
          - Effect: Allow
            Action:
              - "codebuild:CreateReportGroup"
              - "codebuild:CreateReport"
              - "codebuild:UpdateReport"
              - "codebuild:BatchPutTestCases"
              - "codebuild:BatchPutCodeCoverages"
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ProjectName}-*'
      PolicyName: !Sub "${AWS::StackName}-SampleCodeBuildPolicy"
      Roles:
        - !Ref SampleCodeBuildRole

  # Create CodeBuild
  SampleCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ProjectName
      Artifacts:
        Type: CODEPIPELINE
        Name: !Ref ProjectName
        Packaging: NONE
        EncryptionDisabled: false
      BadgeEnabled: false
      Cache:
        Type: NO_CACHE
      EncryptionKey: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3'
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Sub "${AWS::Region}"
            Type: PLAINTEXT
          - Name: AWS_ACCOUNT_ID
            Value: !Sub "${AWS::AccountId}"
            Type: PLAINTEXT
          - Name: IMAGE_TAG
            Value: latest
            Type: PLAINTEXT
          - Name: IMAGE_REPO_NAME
            Value: !ImportValue
              'Fn::Sub': "${EcsStackName}-SampleEcrImageName"
            Type: PLAINTEXT
          - Name: TASK_DEFINITION_NAME
            Value: !ImportValue
              'Fn::Sub': "${EcsStackName}-SampleServiceTaskDef"
            Type: PLAINTEXT
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
        S3Logs:
          Status: DISABLED
          EncryptionDisabled: false
      QueuedTimeoutInMinutes: 480
      ServiceRole: !Ref SampleCodeBuildRole
      Source:
        Type: CODEPIPELINE
        InsecureSsl: false
      TimeoutInMinutes: 60
      Visibility: PRIVATE

  # Make IAM::Role
  SampleCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: codedeploy.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  # Create Application
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-application.html
  SampleDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: "ECS"

  # Create DeployGroup
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-deploymentgroup.html
  SampleDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref SampleDeployApplication
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - "DEPLOYMENT_FAILURE"
          - "DEPLOYMENT_STOP_ON_REQUEST"
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: "TERMINATE"
          TerminationWaitTimeInMinutes: 60
        DeploymentReadyOption:
          ActionOnTimeout: "CONTINUE_DEPLOYMENT"
          WaitTimeInMinutes: 0
      DeploymentConfigName: "CodeDeployDefault.ECSAllAtOnce"
      DeploymentStyle:
        DeploymentType: "BLUE_GREEN"
        DeploymentOption: "WITH_TRAFFIC_CONTROL"
      ECSServices:
        - ServiceName: !ImportValue
                       'Fn::Sub': '${EcsStackName}-SampleServiceName'
          ClusterName: !ImportValue
                       'Fn::Sub': '${EcsStackName}-SampleCluster'
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue
                  'Fn::Sub': '${AlbStackName}-SampleAlbTargetGroupName'
              - Name: !ImportValue
                  'Fn::Sub': '${AlbStackName}-SampleAlbTargetGroupName2'
            ProdTrafficRoute:
              ListenerArns:
                - !ImportValue
                  'Fn::Sub': '${AlbStackName}-SampleAlbListener'
      OutdatedInstancesStrategy: "UPDATE"
      ServiceRoleArn: !GetAtt SampleCodeDeployRole.Arn

  # Create CoePipelineRole
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  SampleCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: codepipeline.amazonaws.com
        Version: 2012-10-17

  # Create CodePipelinePolicy
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
  SampleCodePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
              - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment
            Resource: "*"
      PolicyName: !Sub "${AWS::StackName}-SampleCodePipelineRole"
      Roles:
        - !Ref SampleCodePipelineRole

  # Create Pipeline
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
  SamplePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: "S3"
        Location: !Ref SampleS3BucketForPipeline
      RoleArn: !GetAtt SampleCodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              RunOrder: 1
              Configuration:
                BranchName: !Ref GitHubRepositoryBranch
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref GitHubRepository
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceArtifact
              Region: !Sub '${AWS::Region}'
              Namespace: SourceVariables
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              RunOrder: 1
              Configuration:
                ProjectName: !Ref SampleCodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
              Region: !Sub '${AWS::Region}'
              Namespace: BuildVariables
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: "1"
              RunOrder: 1
              Configuration:
                ApplicationName: !Ref SampleDeployApplication
                DeploymentGroupName: !Ref SampleDeployGroup
              InputArtifacts:
                - Name: BuildArtifact
              Region: !Sub '${AWS::Region}'
              Namespace: DeployVariables

Outputs:
  SampleS3BucketForPipeline:
    Value: !Ref SampleS3BucketForPipeline
    Export:
      Name: !Sub "${AWS::StackName}-SampleS3BucketForPipeline"
  SampleCodeBuild:
    Value: !Ref SampleCodeBuild
    Export:
      Name: !Sub "${AWS::StackName}-SampleCodeBuild"
  SampleDeployApplication:
    Value: !Ref SampleDeployApplication
    Export:
      Name: !Sub "${AWS::StackName}-SampleDeployApplication"
  SampleDeployGroup:
    Value: !Ref SampleDeployGroup
    Export:
      Name: !Sub "${AWS::StackName}-SampleDeployGroup"
  SamplePipeline:
    Value: !Ref SamplePipeline
    Export:
      Name: !Sub "${AWS::StackName}-SamplePipeline"
