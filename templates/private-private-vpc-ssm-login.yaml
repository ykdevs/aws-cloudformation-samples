#
#
AWSTemplateFormatVersion: "2010-09-09"
Description: |

 Private - Private VPC with SSM Login

Parameters:
  Vpc1CidrBlock:
    Type: String
    Description: VPC1's CidrBlock
    Default: 192.168.0.0/24
  Vpc1Subnet1CidrBlock:
    Type: String
    Description: VPC1 Subnet1's CidrBlock
    Default: 192.168.0.0/28
  Vpc1Subnet2CidrBlock:
    Type: String
    Description: VPC1 Subnet2's CidrBlock
    Default: 192.168.0.16/28
  Vpc1Subnet2NatGatewayIp:
    Type: String
    Description: VPC1 Subnet2's NatGateway IpAddress
    Default: 192.168.0.20
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH Key Name
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d

Resources:

  RoleForInstance:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
              - "ssm:GetParameters"
            Resource: "*"
      Roles:
        - !Ref RoleForInstance

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  # VPC1
  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1Subnet1CidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1"

  Vpc1Subnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1"

  Vpc1Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1Subnet1RouteTable
      SubnetId: !Ref Vpc1Subnet1

  Vpc1Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1Subnet2CidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2"

  Vpc1Subnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2"

  Vpc1Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1Subnet2RouteTable
      SubnetId: !Ref Vpc1Subnet2

  Vpc1Subnet2NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      PrivateIpAddress: !Ref Vpc1Subnet2NatGatewayIp
      SubnetId: !Ref Vpc1Subnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2-NatGateway"

  Vpc1RouteFromVpc1Subnet1ToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1Subnet1RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref Vpc1Subnet2NatGateway

  Vpc1Subnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc1SecurityGroupForEc2
      SubnetId: !Ref Vpc1Subnet1
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1-Instance"

  Vpc1Subnet2EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc1SecurityGroupForEc2
      SubnetId: !Ref Vpc1Subnet2
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2-Instance"

  Vpc1SecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic by default"
          IpProtocol: -1
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-ForInstance"

  Vpc1SecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow all outbound traffic by default"
          IpProtocol: -1
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"

  Vpc1SecurityGroupIngressForEndPoint:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SourceSecurityGroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  Vpc1EndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc1Subnet1RouteTable
        - !Ref Vpc1Subnet2RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc1
