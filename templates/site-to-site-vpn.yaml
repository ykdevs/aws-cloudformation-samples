#
# 2つのVPCを構築してSite-to-Site VPNで接続する検証
#
# 1) 1回目はVpc1VpnConnectionOutsideIp、Vpc2VpnConnectionOutsideIpを空で実行
# 2) 2回目はVpc1VpnConnectionOutsideIpに作成したIPを設定して実行
# 3) 3回目はVpc2VpnConnectionOutsideIpに作成したIPを設定して実行
#
# VPNConnectionのCustomerGatewayIdはCloudFormationからは更新できない（新規リソース作成になる）
#
# マネジメントコンソールのSite-to-Site VPN接続画面から
#  4-1) VPN接続を変更でカスタマーゲートウェイ「SiteToSiteVPN-Vpc1」を選択して変更を保存
#  4-2) VPNトンネルオプションを変更でスタートアップアクションを「開始」にして変更を保存
#
#  VPC1 Subnet1 Vpc1Subnet1EC2Instance
#  VPC1 Subnet2 Vpc1Subnet2NatGateway          Vpc1Subnet1EC2Instance
#     |
#    Site-To-Site-VPN
#     |
#  VPC2 Subnet1 Vpc2Subnet1EC2Instance
#
#  Vpc1Subnet1EC2InstanceはNatGatewayを介してVpc2Subnet1EC2Instanceと接続する
#  Vpc1Subnet1EC2Instanceは直接Vpc2Subnet1EC2Instanceと接続する
#  Vpc2Subnet1EC2InstanceはVpc1Subnet1EC2Instanceとは接続できるがVpc1Subnet1EC2Instanceにはルーティングされない
#
AWSTemplateFormatVersion: "2010-09-09"
Description: |

 Site-To-Site VPN

Parameters:
  Vpc1CidrBlock:
    Type: String
    Description: VPC1's CidrBlock
    Default: 192.168.0.0/24
  Vpc1Subnet1CidrBlock:
    Type: String
    Description: VPC1 Subnet1's CidrBlock
    Default: 192.168.0.0/28
  Vpc1Subnet2CidrBlock:
    Type: String
    Description: VPC1 Subnet2's CidrBlock
    Default: 192.168.0.16/28
  Vpc1Subnet2NatGatewayIp:
    Type: String
    Description: VPC1 Subnet2's NatGateway IpAddress
    Default: 192.168.0.20
  Vpc2CidrBlock:
    Type: String
    Description: VPC2's CidrBlock
    Default: 192.168.1.0/24
  Vpc2Subnet1CidrBlock:
    Type: String
    Description: VPC2 Subnet1's CidrBlock
    Default: 192.168.1.0/28
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH Key Name
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d
  Vpc1VpnConnectionOutsideIp:
    Type: String
    Description: VPC1 VpnConnection's Ip Address
  Vpc2VpnConnectionOutsideIp:
    Type: String
    Description: VPC2 VpnConnection's Ip Address

Conditions:
  hasVpc2VpnConnection: !Not [!Equals [!Ref Vpc2VpnConnectionOutsideIp, ""]]
  hasVpc1VpnConnection: !Not [!Equals [!Ref Vpc1VpnConnectionOutsideIp, ""]]

Resources:

  Vpc1VpnConnectionPreSharedKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-PreSharedKey"
      Description: !Sub "Generated by ${AWS::StackName}"
      GenerateSecretString:
        GenerateStringKey: password
        PasswordLength: 32
        ExcludePunctuation: true
        SecretStringTemplate: '{}'

  RoleForInstance:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - s3:*
              - ssm:GetParameters
      Roles:
        - !Ref RoleForInstance

  VpcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  # VPC1
  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1Subnet1CidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1"

  Vpc1Subnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1"

  Vpc1Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1Subnet1RouteTable
      SubnetId: !Ref Vpc1Subnet1

  Vpc1Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1Subnet2CidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2"

  Vpc1Subnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2"

  Vpc1Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1Subnet2RouteTable
      SubnetId: !Ref Vpc1Subnet2

  Vpc1Subnet2NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      PrivateIpAddress: !Ref Vpc1Subnet2NatGatewayIp
      SubnetId: !Ref Vpc1Subnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2-NatGateway"

  Vpc1RouteFromVpc1Subnet1ToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1Subnet1RouteTable
      DestinationCidrBlock: !Ref Vpc2CidrBlock
      NatGatewayId: !Ref Vpc1Subnet2NatGateway

  Vpc1Subnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc1SecurityGroupForEc2
      SubnetId: !Ref Vpc1Subnet1
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet1-Instance1"

  Vpc1Subnet2EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc1SecurityGroupForEc2
      SubnetId: !Ref Vpc1Subnet2
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-Subnet2-Instance1"

  Vpc1SecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-ForInstance"

  Vpc1SecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"

  Vpc1SecurityGroupIngressForEndPoint:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SourceSecurityGroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      FromPort: 443
      ToPort: 443

  Vpc1EndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc1Subnet1RouteTable
        - !Ref Vpc1Subnet2RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc1

  Vpc1VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-VirtualPrivateGateway"

  Vpn1VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc1
      VpnGatewayId: !Ref Vpc1VPNGateway

  Vpc1VPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      RouteTableIds:
        - !Ref Vpc1Subnet2RouteTable
      VpnGatewayId: !Ref Vpc1VPNGateway
    DependsOn: Vpn1VPCGatewayAttachment

  Vpc1SecurityGroupIngressFromVpc2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      CidrIp: !Ref Vpc2CidrBlock
      FromPort: 22
      ToPort: 22

  Vpc1SecurityGroupIngressFromVpc1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      SourceSecurityGroupId: !GetAtt Vpc1SecurityGroupForEc2.GroupId
      FromPort: 22
      ToPort: 22

  Vpc1CustomerGatewayDummy:
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn: 65000
      IpAddress: 1.1.1.1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-dummy"

  Vpc1CustomerGateway1:
    Condition: hasVpc2VpnConnection
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn: 65000
      IpAddress: !Ref Vpc2VpnConnectionOutsideIp
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1SiteToSiteVpn:
    Type: AWS::EC2::VPNConnection
    Properties:
      CustomerGatewayId: !Ref Vpc1CustomerGatewayDummy
      StaticRoutesOnly: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1"
      Type: ipsec.1
      VpnGatewayId: !Ref Vpc1VPNGateway
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: !Sub "{{resolve:secretsmanager:${AWS::StackName}-PreSharedKey:SecretString:password::}}"

  Vpc1VPNConnectionRoute:
    Type: AWS::EC2::VPNConnectionRoute
    Properties:
      DestinationCidrBlock: !Ref Vpc2CidrBlock
      VpnConnectionId: !Ref Vpc1SiteToSiteVpn

  # VPC2
  Vpc2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc2CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2"

  Vpc2Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc2Subnet1CidrBlock
      VpcId: !Ref Vpc2
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-Subnet1"

  Vpc2Subnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-Subnet1"

  Vpc2Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc2Subnet1RouteTable
      SubnetId: !Ref Vpc2Subnet1

  Vpc2Subnet1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc2SecurityGroupForEc2
      SubnetId: !Ref Vpc2Subnet1
      IamInstanceProfile: !Ref VpcInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc2-Subnet1-Instance1"

  Vpc2SecurityGroupForEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-ForInstance"

  Vpc2SecurityGroupForEndPoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-ForEndPoint"

  Vpc2SecurityGroupIngressForEndPoint:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SourceSecurityGroupId: !GetAtt Vpc2SecurityGroupForEc2.GroupId
      FromPort: 443
      ToPort: 443

  Vpc2EndPointForSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForEc2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2Subnet1
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc2Subnet1RouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc2

  Vpc2VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-VirtualPrivateGateway"

  Vpn2VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc2
      VpnGatewayId: !Ref Vpc2VPNGateway

  Vpc2VPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      RouteTableIds:
        - !Ref Vpc2Subnet1RouteTable
      VpnGatewayId: !Ref Vpc2VPNGateway
    DependsOn: Vpn2VPCGatewayAttachment

  Vpc2SecurityGroupIngressFromVpc1NatGateway:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc2SecurityGroupForEc2.GroupId
      CidrIp: !Sub "${Vpc1Subnet2NatGatewayIp}/32"
      FromPort: 22
      ToPort: 22

  Vpc2SecurityGroupIngressFromVpc1Instance:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Sub "Generated by ${AWS::StackName}"
      GroupId: !GetAtt Vpc2SecurityGroupForEc2.GroupId
      CidrIp: !Sub
        - "${InstanceIp}/32"
        - {InstanceIp: !GetAtt Vpc1Subnet2EC2Instance.PrivateIp}
      FromPort: 22
      ToPort: 22

  Vpc2CustomerGateway2:
    Condition: hasVpc1VpnConnection
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn: 65000
      IpAddress: !Ref Vpc1VpnConnectionOutsideIp
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2"

  Vpc2SiteToSiteVpn:
    Condition: hasVpc1VpnConnection
    Type: AWS::EC2::VPNConnection
    Properties:
      CustomerGatewayId: !Ref Vpc2CustomerGateway2
      StaticRoutesOnly: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc2"
      Type: ipsec.1
      VpnGatewayId: !Ref Vpc2VPNGateway
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: !Sub "{{resolve:secretsmanager:${AWS::StackName}-PreSharedKey:SecretString:password::}}"

  Vpc2VPNConnectionRoute:
    Condition: hasVpc1VpnConnection
    Type: AWS::EC2::VPNConnectionRoute
    Properties:
      DestinationCidrBlock: !Ref Vpc1CidrBlock
      VpnConnectionId: !Ref Vpc2SiteToSiteVpn

#Outputs:
#
#  Vpc1VpcId:
#    Value: !Ref Vpc1
#    Description: VpcId for Vpc1
#    Export:
#      Name: !Sub "${AWS::StackName}-Vpc1VpcId"
#
#  Vpc2VpcId:
#    Value: !Ref Vpc2
#    Description: VpcId for Vpc2
#    Export:
#      Name: !Sub "${AWS::StackName}-Vpc2VpcId"
#
#  Vpc2VPNGatewayId:
#    Value: !Ref Vpc2VPNGateway
#    Description: VPN Gateway ID for Vpc2
#    Export:
#      Name: !Sub "${AWS::StackName}-Vpc2VPNGatewayId"
