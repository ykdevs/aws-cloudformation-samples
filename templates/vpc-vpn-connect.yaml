#
# 2つのVPCを構築してEC2にSoftware VPNを構築して接続する。
#
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Make 2 VPCs and connect them with Software VPN on EC2.

Parameters:
  Vpc1CidrBlock:
    Type: String
    Description: VPC1's CidrBlock
    Default: 172.16.0.0/24
  Vpc1PrivateSubnetCidrBlock:
    Type: String
    Description: VPC1 PrivateSubnets CidrBlock
    Default: 172.16.0.0/28
  Vpc1PublicSubnetCidrBlock:
    Type: String
    Description: VPC1 PublicSubnets CidrBlock
    Default: 172.16.0.16/28
  Vpc1PublicSubnetNatGatewayIp:
    Type: String
    Description: VPC1 PublicSubnets NAT Gateway IP
    Default: 172.16.0.20
  Vpc2CidrBlock:
    Type: String
    Description: VPC2's CidrBlock
    Default: 172.16.1.0/24
  Vpc2PrivateSubnetCidrBlock:
    Type: String
    Description: VPC2 PrivateSubnets CidrBlock
    Default: 172.16.1.0/28
  Vpc2PublicSubnetCidrBlock:
    Type: String
    Description: VPC2 PublicSubnets CidrBlock
    Default: 172.16.1.16/28
  Vpc2PublicSubnetNatGatewayIp:
    Type: String
    Description: VPC2 PublicSubnets NAT Gateway IP
    Default: 172.16.1.20
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d
  HasPrivateEc2:
    Type: String
    Description: Whether to create EC2 instance or not
    AllowedValues:
      - "true"
      - "false"
  HasPublicEc2:
    Type: String
    Description: Whether to create EC2 instance or not
    AllowedValues:
      - "true"
      - "false"

Conditions:
  hasPrivateEc2: !Equals [ !Ref HasPrivateEc2, "true" ]
  hasPublicEc2: !Equals [ !Ref HasPublicEc2, "true" ]
  hasEc2: !Or [ Condition: hasPrivateEc2, Condition: hasPublicEc2 ]

Resources:

  ##############################################################################
  # IAM Role for EC2 Instance
  ##############################################################################
  RoleForInstance:
    Condition: hasEc2
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Condition: hasEc2
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
              - "ssm:GetParameters"
            Resource:
              - "*"
      Roles:
        - !Ref RoleForInstance

  InstanceProfile:
    Condition: hasEc2
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  ##############################################################################
  # VPC1
  #  - VPC1 InternetGateway
  #  - VPC1 PublicSubnet
  #    - VPC1 PublicSubnet EC2 Instance
  #    - VPC1 PublicSubnet NAT Gateway
  #  - VPC1 PrivateSubnet
  #    - VPC1 PrivateSubnet EC2 Instance
  ##############################################################################
  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc1
      InternetGatewayId: !Ref Vpc1InternetGateway

  Vpc1PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1PrivateSubnetCidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet"

  Vpc1PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet"

  Vpc1PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PrivateSubnetRouteTable
      SubnetId: !Ref Vpc1PrivateSubnet

  Vpc1PrivateSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Vpc1PublicSubnetNatGateway

  Vpc1PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1PublicSubnetCidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet"

  Vpc1PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet"

  Vpc1PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PublicSubnetRouteTable
      SubnetId: !Ref Vpc1PublicSubnet

  Vpc1PublicSubnetDefaultRoute:
    Condition: hasPublicEc2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1PublicSubnetRouteTable
      DestinationCidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEC2Instance.PublicIp }
      GatewayId: !Ref Vpc1InternetGateway

  Vpc1PublicSubnetNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      PrivateIpAddress: !Ref Vpc1PublicSubnetNatGatewayIp
      SubnetId: !Ref Vpc1PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet"

  ##############################################################################
  # Network ACL for VPC1 PublicSubnet
  ##############################################################################
  Vpc1PublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet"

  Vpc1PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      SubnetId: !Ref Vpc1PublicSubnet

  Vpc1PublicSubnetNetworkAclEntryIngress:
    Condition: hasPublicEc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEC2Instance.PublicIp }

  Vpc1PublicSubnetNetworkAclEntryEgress:
    Condition: hasPublicEc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEC2Instance.PublicIp }

  ##############################################################################
  # EC2 Instance for VPC1 PublicSubnet
  ##############################################################################
  Vpc1PublicSubnetEC2Instance:
    Condition: hasPublicEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !GetAtt Vpc1PublicSubnetSecurityGroupForEc2.GroupId
          SubnetId: !Ref Vpc1PublicSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-Instance"

  Vpc1PublicSubnetSecurityGroupForEc2:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-ForInstance"

  Vpc1PublicSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc1PublicSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc1PublicSubnetSecurityGroupIngressForEc2FromOther:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from other VPC to EC2"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc1PublicSubnetSecurityGroupEgressForEc2ToOther:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from EC2 to other VPC"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc1PublicSubnetSecurityGroupForEndPoint:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - Description: "Allow HTTPS from Endpoint to local"
          CidrIp: !Ref Vpc1PublicSubnetCidrBlock
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-ForEndPoint"

  Vpc1PublicSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  Vpc1PublicSubnetEndPointForSsm:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc1PublicSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc1

  Vpc1PublicSubnetEndPointForSsmMessages:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc1PublicSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc1

  Vpc1PublicSubnetEndPointForEc2Messages:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc1PublicSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc1

  Vpc1PublicSubnetEndPointForS3:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc1PublicSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc1

  ##############################################################################
  # EC2 Instance for VPC1 PrivateSubnet
  ##############################################################################
  Vpc1PrivateSubnetEC2Instance:
    Condition: hasPrivateEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc1PrivateSubnetSecurityGroupForEc2
      SubnetId: !Ref Vpc1PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-Instance"

  Vpc1PrivateSubnetSecurityGroupForEc2:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-ForInstance"

  Vpc1PrivateSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc1PrivateSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc1PrivateSubnetSecurityGroupIngressForEc2FromOther:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from other VPC to EC2"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc1PrivateSubnetSecurityGroupEgressForEc2ToOther:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from EC2 to other VPC"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc1PrivateSubnetSecurityGroupForEndPoint:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - Description: "Allow HTTPS from Endpoint to local"
          CidrIp: !Ref Vpc1PrivateSubnetCidrBlock
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-ForEndPoint"

  Vpc1PrivateSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  Vpc1PrivateSubnetEndPointForSsm:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc1PrivateSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1PrivateSubnetEndPointForSsmMessages:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc1PrivateSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1PrivateSubnetEndPointForEc2Messages:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc1PrivateSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1PrivateSubnetEndPointForS3:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc1PrivateSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc1

  ##############################################################################
  # VPC2
  #  - VPC2 InternetGateway
  #  - VPC2 PublicSubnet
  #    - VPC2 PublicSubnet EC2 Instance
  #    - VPC2 PublicSubnet NAT Gateway
  #  - VPC2 PrivateSubnet
  #    - VPC2 PrivateSubnet EC2 Instance
  ##############################################################################
  Vpc2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc2CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2"

  Vpc2InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2"

  Vpc2VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc2
      InternetGatewayId: !Ref Vpc2InternetGateway

  Vpc2PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc2PrivateSubnetCidrBlock
      VpcId: !Ref Vpc2
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet"

  Vpc2PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet"

  Vpc2PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc2PrivateSubnetRouteTable
      SubnetId: !Ref Vpc2PrivateSubnet

  Vpc2PrivateSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc2PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Vpc2PublicSubnetNatGateway

  Vpc2PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc2PublicSubnetCidrBlock
      VpcId: !Ref Vpc2
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet"

  Vpc2PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet"

  Vpc2PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc2PublicSubnetRouteTable
      SubnetId: !Ref Vpc2PublicSubnet

  Vpc2PublicSubnetDefaultRoute:
    Condition: hasPublicEc2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc2PublicSubnetRouteTable
      DestinationCidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEC2Instance.PublicIp }
      GatewayId: !Ref Vpc2InternetGateway

  Vpc2PublicSubnetNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      PrivateIpAddress: !Ref Vpc2PublicSubnetNatGatewayIp
      SubnetId: !Ref Vpc2PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet"

  ##############################################################################
  # Network ACL for VPC2 PublicSubnet
  ##############################################################################
  Vpc2PublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet"

  Vpc2PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      SubnetId: !Ref Vpc2PublicSubnet

  Vpc2PublicSubnetNetworkAclEntryIngress:
    Condition: hasPublicEc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEC2Instance.PublicIp }

  Vpc2PublicSubnetNetworkAclEntryEgress:
    Condition: hasPublicEc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEC2Instance.PublicIp }

  ##############################################################################
  # EC2 Instance for VPC2 PublicSubnet
  ##############################################################################
  Vpc2PublicSubnetEC2Instance:
    Condition: hasPublicEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !GetAtt Vpc2PublicSubnetSecurityGroupForEc2.GroupId
          SubnetId: !Ref Vpc2PublicSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-Instance"

  Vpc2PublicSubnetSecurityGroupForEc2:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-ForInstance"

  Vpc2PublicSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc2PublicSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc2PublicSubnetSecurityGroupIngressForEc2FromOther:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from other VPC to EC2"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc2PublicSubnetSecurityGroupEgressForEc2ToOther:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from EC2 to other VPC"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc2PublicSubnetSecurityGroupForEndPoint:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - Description: "Allow HTTPS from Endpoint to local"
          CidrIp: !Ref Vpc2PublicSubnetCidrBlock
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-ForEndPoint"

  Vpc2PublicSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  Vpc2PublicSubnetEndPointForSsm:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc2PublicSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc2

  Vpc2PublicSubnetEndPointForSsmMessages:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc2PublicSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc2

  Vpc2PublicSubnetEndPointForEc2Messages:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc2PublicSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PublicSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc2

  Vpc2PublicSubnetEndPointForS3:
    Condition: hasPublicEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc2PublicSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc2

  ##############################################################################
  # EC2 Instance for Vpc2 PrivateSubnet
  ##############################################################################
  Vpc2PrivateSubnetEC2Instance:
    Condition: hasPrivateEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc2PrivateSubnetSecurityGroupForEc2
      SubnetId: !Ref Vpc2PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-Instance"

  Vpc2PrivateSubnetSecurityGroupForEc2:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-ForInstance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-ForInstance"

  Vpc2PrivateSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc2PrivateSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc2PrivateSubnetSecurityGroupIngressForEc2FromOther:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from other VPC to EC2"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc2PrivateSubnetSecurityGroupEgressForEc2ToOther:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow SSH from EC2 to other VPC"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  Vpc2PrivateSubnetSecurityGroupForEndPoint:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - Description: "Allow HTTPS from Endpoint to local"
          CidrIp: !Ref Vpc2PrivateSubnetCidrBlock
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-ForEndPoint"

  Vpc2PrivateSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPublicEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  Vpc2PrivateSubnetEndPointForSsm:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc2PrivateSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2PrivateSubnetEndPointForSsmMessages:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc2PrivateSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2PrivateSubnetEndPointForEc2Messages:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc2PrivateSubnetSecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2PrivateSubnetEndPointForS3:
    Condition: hasPrivateEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc2PrivateSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc2
