#
# 2つのVPCを構築してEC2にSoftware VPNを構築して接続する。
#
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Make 2 VPCs and connect them with Software VPN on EC2.

Parameters:
  Vpc1CidrBlock:
    Type: String
    Description: VPC1's CidrBlock
    Default: 172.16.0.0/24
  Vpc1PublicSubnetCidrBlock:
    Type: String
    Description: VPC1 PublicSubnets CidrBlock
    Default: 172.16.0.0/28
  Vpc1GatewaySubnetCidrBlock:
    Type: String
    Description: VPC1 GatewaySubnet CidrBlock
    Default: 172.16.0.16/28
  Vpc1PrivateSubnetCidrBlock:
    Type: String
    Description: VPC1 PrivateSubnet CidrBlock
    Default: 172.16.0.32/28
  Vpc1GatewaySubnetNatGatewayIp:
    Type: String
    Description: VPC1 PublicSubnets NAT Gateway IP
    Default: 172.16.0.20
  Vpc2CidrBlock:
    Type: String
    Description: VPC2's CidrBlock
    Default: 172.16.1.0/24
  Vpc2PublicSubnetCidrBlock:
    Type: String
    Description: VPC2 PublicSubnets CidrBlock
    Default: 172.16.1.0/28
  Vpc2PrivateSubnetCidrBlock:
    Type: String
    Description: VPC2 PrivateSubnet CidrBlock
    Default: 172.16.1.32/28
  KeyName:
    Description: SSH Key Name
    Type: AWS::EC2::KeyPair::KeyName
  AmiId:
    Type: String
    Description: AMI-ID for EC2
    Default: ami-05a03e6058638183d
  VpnGatewayAmiId:
    Type: String
    Description: AMI-ID for VpnGateway
    Default: ami-005edfa7e37fa41a4
  HasVpc2:
    Type: String
    Description: Whether to create VPC2 or not
    AllowedValues:
      - "true"
      - "false"
  HasPrivateEc2:
    Type: String
    Description: Whether to create EC2 instance or not
    AllowedValues:
      - "true"
      - "false"
  HasPublicVpnGateway:
    Type: String
    Description: Whether to create EC2 instance or not
    AllowedValues:
      - "true"
      - "false"
  HasPublicS3Gateway:
    Type: String
    Description: Whether to create S3 Gateway or not
    AllowedValues:
      - "true"
      - "false"

Conditions:
  hasVpc2: !Equals [ !Ref HasVpc2, "true" ]
  hasPrivateEc2: !Equals [ !Ref HasPrivateEc2, "true" ]
  hasPublicVpnGateway: !Equals [ !Ref HasPublicVpnGateway, "true" ]
  hasVpc2PrivateEc2: !And [ Condition: hasVpc2, Condition: hasPrivateEc2 ]
  hasVpc2PublicVpnGateway: !And [ Condition: hasVpc2, Condition: hasPublicVpnGateway ]
  hasEc2: !Or [ Condition: hasPrivateEc2, Condition: hasPublicVpnGateway ]
  hasVpc2Ec2: !And [ Condition: hasVpc2, Condition: hasEc2 ]
  hasPublicS3Gateway: !And [!Equals [ !Ref HasPublicS3Gateway, "true" ], Condition: hasPublicVpnGateway]
  hasVpc2PublicS3Gateway: !And [ Condition: hasVpc2, Condition: hasPublicS3Gateway ]

Resources:

  ##############################################################################
  # IAM Role for EC2 Instance
  ##############################################################################
  RoleForInstance:
    Condition: hasEc2
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  PolicyForInstance:
    Condition: hasEc2
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ForInstance"
      Description: !Sub "Generated by ${AWS::StackName}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:*"
              - "ssm:GetParameters"
            Resource:
              - "*"
      Roles:
        - !Ref RoleForInstance

  InstanceProfile:
    Condition: hasEc2
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-Instance"
      Path: "/"
      Roles:
        - !Ref RoleForInstance

  ##############################################################################
  # VPC1
  #  - VPC1 InternetGateway
  #  - VPC1 PublicSubnet
  #    - VPC1 PublicSubnet EC2 VPN Gateway
  #  - VPC1 GatewaySubnet
  #    - VPC1 GatewaySubnet NAT Gateway
  #  - VPC1 PrivateSubnet
  #    - VPC1 PrivateSubnet EC2 Instance
  ##############################################################################
  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc1CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1"

  Vpc1VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc1
      InternetGatewayId: !Ref Vpc1InternetGateway

  ##############################################################################
  # PublicSubnet for VPC1
  ##############################################################################
  Vpc1PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1PublicSubnetCidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet"

  Vpc1PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet"

  Vpc1PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PublicSubnetRouteTable
      SubnetId: !Ref Vpc1PublicSubnet

  # Allow traffic between VPC1 and VPC2 Global IP
  Vpc1PublicSubnetDefaultRoute:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1PublicSubnetRouteTable
      DestinationCidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEip.PublicIp }
      GatewayId: !Ref Vpc1InternetGateway
    DependsOn:
      - Vpc1VpcGatewayAttachment
      - Vpc1PublicSubnetRouteTableAssociation

  ##############################################################################
  # Network ACL for VPC1 PublicSubnet
  ##############################################################################
  Vpc1PublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet"

  Vpc1PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      SubnetId: !Ref Vpc1PublicSubnet

  # Allow Any from VPC1 local
  Vpc1PublicSubnetNetworkAclEntryIngressFromLocal:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc1CidrBlock

  Vpc1PublicSubnetNetworkAclEntryEgressToLocal:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc1CidrBlock

  # Allow Any from VPC2 local
  Vpc1PublicSubnetNetworkAclEntryIngressFromOther:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc2CidrBlock

  Vpc1PublicSubnetNetworkAclEntryEgressToOther:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc2CidrBlock

  # Allow Any from VPC2 Global IP to VPC1 PublicSubnet
  Vpc1PublicSubnetNetworkAclEntryIngressFromGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 102
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEip.PublicIp }

  Vpc1PublicSubnetNetworkAclEntryEgressToGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 102
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEip.PublicIp }

  # Network ACL for S3 Gateway
  Vpc1PublicSubnetNetworkAclEntryIngressForS3Gateway:
    Condition: hasPublicS3Gateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 199
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  Vpc1PublicSubnetNetworkAclEntryEgressForS3Gateway:
    Condition: hasPublicS3Gateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc1PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 199
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  ##############################################################################
  # EC2 Instance for VPC1 PublicSubnet
  ##############################################################################
  Vpc1PublicSubnetVpnGateway:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref VpnGatewayAmiId
      InstanceType: "t2.small"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
          SubnetId: !Ref Vpc1PublicSubnet
      SourceDestCheck: false
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-VpnGateway"

  Vpc1PublicSubnetEip:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-VpnGateway"

  Vpc1PublicSubnetEipAssociation:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref Vpc1PublicSubnetVpnGateway
      EIP: !Ref Vpc1PublicSubnetEip

  Vpc1PublicSubnetSecurityGroupForVpnGateway:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-VpnGateway"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PublicSubnet-VpnGateway"

  # Allow Any from VPC1 local
  Vpc1PublicSubnetSecurityGroupIngressForVpnGatewayFromLocal:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from local to VpnGateway"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc1PublicSubnetSecurityGroupEgressForVpnGatewayToLocal:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from VpnGateway to local"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  # Allow Any from VPC2 local
  Vpc1PublicSubnetSecurityGroupIngressForVpnGatewayFromOther:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from other VPC to VpnGateway"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc1PublicSubnetSecurityGroupEgressForVpnGatewayToOther:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from VpnGateway to other VPC"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  # Allow Any from VPC2 Global IP to VPC1 PublicSubnet
  Vpc1PublicSubnetSecurityGroupIngressForVpnGatewayFromGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow Any from Global IP to VpnGateway"
      CidrIp: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEip.PublicIp }
      IpProtocol: -1

  Vpc1PublicSubnetSecurityGroupEgressForVpnGatewayToGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow Any from VpnGateway to Global IP"
      CidrIp: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc2PublicSubnetEip.PublicIp }
      IpProtocol: -1

  # Security Group Ingress for Endpoint
  Vpc1PublicSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from VpnGateway to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Allow Any outbound from EC2 to S3 Gateway
  Vpc1PublicSubnetSecurityGroupEgressForVpnGatewayToS3Gateway:
    Condition: hasPublicS3Gateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from VpnGateway to S3 Gateway"
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ##############################################################################
  # GatewaySubnet for VPC1
  ##############################################################################
  Vpc1GatewaySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1GatewaySubnetCidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-GatewaySubnet"

  Vpc1GatewaySubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-GatewaySubnet"

  Vpc1GatewaySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1GatewaySubnetRouteTable
      SubnetId: !Ref Vpc1GatewaySubnet

  # GatewaySubnet Default Route to EC2 VPN Gateway
  Vpc1GatewaySubnetDefaultRoute:
    Condition: hasPublicVpnGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1GatewaySubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      InstanceId: !Ref Vpc1PublicSubnetVpnGateway

  Vpc1GatewaySubnetNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      PrivateIpAddress: !Ref Vpc1GatewaySubnetNatGatewayIp
      SubnetId: !Ref Vpc1GatewaySubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-GatewaySubnet-NatGateway"

  ##############################################################################
  # PrivateSubnet for VPC1
  ##############################################################################
  Vpc1PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc1PrivateSubnetCidrBlock
      VpcId: !Ref Vpc1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet"

  Vpc1PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet"

  Vpc1PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc1PrivateSubnetRouteTable
      SubnetId: !Ref Vpc1PrivateSubnet

  # PrivateSubnet Default Route to NAT Gateway
  Vpc1PrivateSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc1PrivateSubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref Vpc1GatewaySubnetNatGateway

  ##############################################################################
  # EC2 Instance for VPC1 PrivateSubnet
  ##############################################################################
  Vpc1PrivateSubnetEC2Instance:
    Condition: hasPrivateEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc1PrivateSubnetSecurityGroupForEc2
      SubnetId: !Ref Vpc1PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-Instance"

  Vpc1PrivateSubnetSecurityGroupForEc2:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-Instance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-PrivateSubnet-Instance"

  # Allow Any from VPC1 local
  Vpc1PrivateSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc1PrivateSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  # Allow Any from VPC2 local
  Vpc1PrivateSubnetSecurityGroupIngressForEc2FromOther:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from other VPC to EC2"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc1PrivateSubnetSecurityGroupEgressForEc2ToOther:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to other VPC"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  # Security Group Ingress for Endpoint
  Vpc1PrivateSubnetSecurityGroupIngressForEndPoint:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Allow Any outbound from EC2 to S3 Gateway
  Vpc1PrivateSubnetSecurityGroupEgressForEc2ToS3Gateway:
    Condition: hasPrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc1PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to S3 Gateway"
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ##############################################################################
  # EndPoint for VPC1 (shared between Private Subnet and Public Subnet)
  ##############################################################################
  Vpc1SecurityGroupForEndPoint:
    Condition: hasEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - Description: "Allow HTTPS from Endpoint to VPC1"
          CidrIp: !Ref Vpc1CidrBlock
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc1-ForEndPoint"

  Vpc1EndPointForSsm:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForSsmMessages:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForEc2Messages:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc1SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc1PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc1

  Vpc1EndPointForS3:
    Condition: hasEc2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc1PublicSubnetRouteTable
        - !Ref Vpc1PrivateSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc1

  ##############################################################################
  # VPC2
  #  - VPC2 InternetGateway
  #  - VPC2 PublicSubnet
  #    - VPC2 PublicSubnet EC2 VPN Gateway
  #  - VPC2 PrivateSubnet
  #    - VPC2 PrivateSubnet EC2 Instance
  ##############################################################################
  Vpc2:
    Condition: hasVpc2
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpc2CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2"

  Vpc2InternetGateway:
    Condition: hasVpc2
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2"

  Vpc2VpcGatewayAttachment:
    Condition: hasVpc2
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc2
      InternetGatewayId: !Ref Vpc2InternetGateway

  ##############################################################################
  # PublicSubnet for VPC2
  ##############################################################################
  Vpc2PublicSubnet:
    Condition: hasVpc2
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc2PublicSubnetCidrBlock
      VpcId: !Ref Vpc2
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet"

  Vpc2PublicSubnetRouteTable:
    Condition: hasVpc2
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet"

  Vpc2PublicSubnetRouteTableAssociation:
    Condition: hasVpc2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc2PublicSubnetRouteTable
      SubnetId: !Ref Vpc2PublicSubnet

  # Allow traffic between VPC2 and VPC1 Global IP
  Vpc2PublicSubnetDefaultRoute:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc2PublicSubnetRouteTable
      DestinationCidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEip.PublicIp }
      GatewayId: !Ref Vpc2InternetGateway
    DependsOn:
      - Vpc2VpcGatewayAttachment
      - Vpc2PublicSubnetRouteTableAssociation

  ##############################################################################
  # Network ACL for VPC2 PublicSubnet
  ##############################################################################
  Vpc2PublicSubnetNetworkAcl:
    Condition: hasVpc2
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet"

  Vpc2PublicSubnetNetworkAclAssociation:
    Condition: hasVpc2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      SubnetId: !Ref Vpc2PublicSubnet

  # Allow Any from VPC2 local
  Vpc2PublicSubnetNetworkAclEntryIngressFromLocal:
    Condition: hasVpc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc2CidrBlock

  Vpc2PublicSubnetNetworkAclEntryEgressToLocal:
    Condition: hasVpc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc2CidrBlock

  # Allow Any from VPC1 local
  Vpc2PublicSubnetNetworkAclEntryIngressFromOther:
    Condition: hasVpc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc1CidrBlock

  Vpc2PublicSubnetNetworkAclEntryEgressToOther:
    Condition: hasVpc2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref Vpc1CidrBlock

  # Allow Any from VPC1 Global IP to VPC2 PublicSubnet
  Vpc2PublicSubnetNetworkAclEntryIngressFromGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 102
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEip.PublicIp }

  Vpc2PublicSubnetNetworkAclEntryEgressToGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 102
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEip.PublicIp }

  # Network ACL for S3 Gateway
  Vpc2PublicSubnetNetworkAclEntryIngressForS3Gateway:
    Condition: hasVpc2PublicS3Gateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: false
      RuleNumber: 199
      Protocol: 6
      PortRange:
        From: 1024
        To: 65535
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  Vpc2PublicSubnetNetworkAclEntryEgressForS3Gateway:
    Condition: hasVpc2PublicS3Gateway
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Vpc2PublicSubnetNetworkAcl
      Egress: true
      RuleNumber: 199
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  ##############################################################################
  # EC2 Instance for VPC2 PublicSubnet
  ##############################################################################
  Vpc2PublicSubnetVpnGateway:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref VpnGatewayAmiId
      InstanceType: "t2.small"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
          SubnetId: !Ref Vpc2PublicSubnet
      SourceDestCheck: false
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-VpnGateway"

  Vpc2PublicSubnetEip:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-VpnGateway"

  Vpc2PublicSubnetEipAssociation:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref Vpc2PublicSubnetVpnGateway
      EIP: !Ref Vpc2PublicSubnetEip

  Vpc2PublicSubnetSecurityGroupForVpnGateway:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-VpnGateway"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PublicSubnet-VpnGateway"

  # Allow Any from VPC2 local
  Vpc2PublicSubnetSecurityGroupIngressForVpnGatewayFromLocal:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from local to VpnGateway"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc2PublicSubnetSecurityGroupEgressForVpnGatewayToLocal:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from VpnGateway to local"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  # Allow Any from VPC1 local
  Vpc2PublicSubnetSecurityGroupIngressForVpnGatewayFromOther:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from other VPC to VpnGateway"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc2PublicSubnetSecurityGroupEgressForVpnGatewayToOther:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from VpnGateway to other VPC"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  # Allow Any from VPC1 Global IP to VPC1 PublicSubnet
  Vpc2PublicSubnetSecurityGroupIngressForVpnGatewayFromGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow Any from Global IP to VpnGateway"
      CidrIp: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEip.PublicIp }
      IpProtocol: -1

  Vpc2PublicSubnetSecurityGroupEgressForVpnGatewayToGlobalAny:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow Any from VpnGateway to Global IP"
      CidrIp: !Sub
        - "${IpAddress}/32"
        - { "IpAddress": !GetAtt Vpc1PublicSubnetEip.PublicIp }
      IpProtocol: -1

  # Security Group Ingress for Endpoint
  Vpc2PublicSubnetSecurityGroupIngressForEndPoint:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from VpnGateway to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Allow Any outbound from EC2 to S3 Gateway
  Vpc2PublicSubnetSecurityGroupEgressForVpnGatewayToS3Gateway:
    Condition: hasVpc2PublicS3Gateway
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PublicSubnetSecurityGroupForVpnGateway.GroupId
      Description: "Allow all traffic from VpnGateway to S3 Gateway"
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ##############################################################################
  # PrivateSubnet for VPC2
  ##############################################################################
  Vpc2PrivateSubnet:
    Condition: hasVpc2
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Vpc2PrivateSubnetCidrBlock
      VpcId: !Ref Vpc2
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet"

  Vpc2PrivateSubnetRouteTable:
    Condition: hasVpc2
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet"

  Vpc2PrivateSubnetRouteTableAssociation:
    Condition: hasVpc2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Vpc2PrivateSubnetRouteTable
      SubnetId: !Ref Vpc2PrivateSubnet

  # PrivateSubnet Default Route to NAT Gateway
  Vpc2PrivateSubnetDefaultRoute:
    Condition: hasVpc2PublicVpnGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Vpc2PrivateSubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      InstanceId: !Ref Vpc2PublicSubnetVpnGateway

  ##############################################################################
  # EC2 Instance for Vpc2 PrivateSubnet
  ##############################################################################
  Vpc2PrivateSubnetEC2Instance:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Vpc2PrivateSubnetSecurityGroupForEc2
      SubnetId: !Ref Vpc2PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-Instance"

  Vpc2PrivateSubnetSecurityGroupForEc2:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-Instance"
      GroupDescription: !Sub "Generated By ${AWS::StackName}"
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-PrivateSubnet-Instance"

  # Allow Any from VPC2 local
  Vpc2PrivateSubnetSecurityGroupIngressForEc2FromLocal:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from local to EC2"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  Vpc2PrivateSubnetSecurityGroupEgressForEc2ToLocal:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to local"
      CidrIp: !Ref Vpc2CidrBlock
      IpProtocol: -1

  # Allow Any from VPC1 local
  Vpc2PrivateSubnetSecurityGroupIngressForEc2FromOther:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from other VPC to EC2"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  Vpc2PrivateSubnetSecurityGroupEgressForEc2ToOther:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to other VPC"
      CidrIp: !Ref Vpc1CidrBlock
      IpProtocol: -1

  # Security Group Ingress for Endpoint
  Vpc2PrivateSubnetSecurityGroupIngressForEndPoint:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      Description: "Allow HTTPS from EC2 to Endpoint"
      SourceSecurityGroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Allow Any outbound from EC2 to S3 Gateway
  Vpc2PrivateSubnetSecurityGroupEgressForEc2ToS3Gateway:
    Condition: hasVpc2PrivateEc2
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt Vpc2PrivateSubnetSecurityGroupForEc2.GroupId
      Description: "Allow all traffic from EC2 to S3 Gateway"
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ##############################################################################
  # EndPoint for VPC2 (shared between Private Subnet and Public Subnet)
  ##############################################################################
  Vpc2SecurityGroupForEndPoint:
    Condition: hasVpc2Ec2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Vpc2-ForEndPoint"
      GroupDescription: !Sub "Generated by ${AWS::StackName}"
      SecurityGroupEgress:
        - Description: "Allow HTTPS from Endpoint to VPC2"
          CidrIp: !Ref Vpc2CidrBlock
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc2-ForEndPoint"

  Vpc2EndPointForSsm:
    Condition: hasVpc2Ec2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForSsmMessages:
    Condition: hasVpc2Ec2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForEc2Messages:
    Condition: hasVpc2Ec2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SecurityGroupIds:
        - !GetAtt Vpc2SecurityGroupForEndPoint.GroupId
      SubnetIds:
        - !Ref Vpc2PrivateSubnet
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc2

  Vpc2EndPointForS3:
    Condition: hasVpc2Ec2
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref Vpc2PublicSubnetRouteTable
        - !Ref Vpc2PrivateSubnetRouteTable
      VpcEndpointType: "Gateway"
      VpcId: !Ref Vpc2
